<!--
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.s
-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:gong="urn:gong-wpf-dragdrop"
                    xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:entities="clr-namespace:Octgn.DataNew.Entities;assembly=Octgn.DataNew"
                    xmlns:local="clr-namespace:Octide"
                    xmlns:controls="clr-namespace:Octide.Controls"
                    xmlns:model="clr-namespace:Octide.ItemModel">

    <local:RadioButtonStateConverter x:Key="RadioConverter"/>
    <local:InverseBooleanConverter x:Key="InverseBooleanConverter"/>

    <Style x:Key="OctideTitleStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="Foreground" Value="{StaticResource MahApps.Brushes.Accent}"/>
        <Setter Property="FontSize" Value="24"/>
    </Style>
    <Style x:Key="OctideDescriptionStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="Margin" Value="5 2 2 2 "/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Foreground" Value="{StaticResource MahApps.Brushes.Text}"/>
    </Style>

    <Style x:Key="OctideInputTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MahApps.Styles.TextBox}" >
        <Setter Property="Focusable" Value="True"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="OctideTreeViewItemStyle" TargetType="{x:Type Border}" >
        <Setter Property="Padding" Value="1" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Style.Resources>
            <Style TargetType="{x:Type TextBlock}" >
                <Setter Property="Margin" Value="2,0,2,0" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Foreground" Value="Black" />
            </Style>

            <Style TargetType="{x:Type StackPanel}" >
                <Setter Property="Orientation" Value="Horizontal" />
                <Setter Property="MinHeight" Value="18" />
            </Style>

            <Style TargetType="{x:Type Button}" >
                <Setter Property="Padding" Value="2,0,2,0" />
                <Setter Property="Margin" Value="2,0,2,0" />
                <Setter Property="FontSize" Value="10" />
                <Setter Property="BorderThickness" Value="2" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="BorderBrush" Value="Black" />
            </Style>

            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="Foreground" Value="Yellow" />
                <Setter Property="Padding" Value="0" />
                <Setter Property="Margin" Value="2,0,2,0" />
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <Setter Property="MinWidth" Value="80" />
                <Setter Property="MinHeight" Value="18" />
                <Setter Property="FontSize" Value="12" />
                <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
                <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)/ErrorContent}" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}" >
                <Setter Property="IsReadOnly" Value="True" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Padding" Value="2"/>
                <Setter Property="Margin" Value="2,0,2,0"/>
                <Setter Property="MinWidth" Value="70"/>
                <Setter Property="MinHeight" Value="5"/>
                <Setter Property="DisplayMemberPath" Value="Name"/>
                <Setter Property="FontSize" Value="11"/>
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="IdeTreeViewControl" TargetType="{x:Type TreeView}" BasedOn="{StaticResource MahApps.Styles.TreeView.Virtualized}">
        <Setter Property="BorderBrush" Value="{StaticResource MahApps.Brushes.Border.NonActive}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="gong:DragDrop.IsDragSource" Value="True" />
        <Setter Property="gong:DragDrop.IsDropTarget" Value="True" />
        <Setter Property="gong:DragDrop.DragDropCopyKeyState" Value="ControlKey" />
        <Setter Property="gong:DragDrop.UseDefaultEffectDataTemplate" Value="True" />
    </Style>

    <Style TargetType="{x:Type controls:KeyInputTextBox}" BasedOn="{StaticResource {x:Type TextBox}}"/>

    <Style x:Key="GridSplitterPreviewStyle" >
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Fill="#80000000"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Transparent}"/>
        <Setter Property="PreviewStyle" Value="{StaticResource GridSplitterPreviewStyle}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="5">
                                <Canvas RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"
                                Height="50" VerticalAlignment="Center"
                                Width="5" HorizontalAlignment="Center">
                                    <Line Y1="0" Y2="50" X1="0" X2="0"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="1" X2="1"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="5" X2="5"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line Y1="0" Y2="50" X1="6" X2="6"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                </Canvas>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GridSplitter}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            CornerRadius="5">
                                <Canvas RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"
                                Height="5" VerticalAlignment="Center"
                                Width="50" HorizontalAlignment="Center">
                                    <Line X1="0" X2="50" Y1="0" Y2="0"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="1" Y2="1"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="5" Y2="5"
                                  Stroke="White" StrokeThickness="1"/>
                                    <Line X1="0" X2="50" Y1="6" Y2="6"
                                  Stroke="#A0A0A0" StrokeThickness="1"/>
                                </Canvas>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="VirtualListBox" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border CornerRadius="4" Background="{TemplateBinding Background}">
                        <Grid>
                            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,0,0,0" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#FF017BCD" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="SkyBlue" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <ContextMenu x:Key="ListBoxContextMenu">
        <MenuItem Header="Make Default" Command="{Binding MakeDefaultCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanBeDefault}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem Header="Delete" Command="{Binding RemoveCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanRemove}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem Header="Copy" Command="{Binding CopyCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanCopy}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
        <MenuItem Header="Insert New" Command="{Binding InsertCommand}" >
            <MenuItem.Style>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding CanInsert}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </MenuItem.Style>
        </MenuItem>
    </ContextMenu>

    <Style x:Key="IdeBaseItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContextMenu" Value="{StaticResource ListBoxContextMenu}" />
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Highlight}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsSelected" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Gray.MouseOver}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsSelected" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Accent}"/>
            </MultiTrigger>
            <DataTrigger Binding="{Binding IsDefault}" Value="True" >
                <Setter Property="BorderThickness" Value="3"/>
                <Setter Property="BorderBrush" Value="Red" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsVisible}" Value="False" >
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="OctideComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MahApps.Styles.ComboBox}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <DockPanel>
                        <Image DockPanel.Dock="Left" Stretch="Uniform" Margin="1" MaxHeight="28" VerticalAlignment="Center" Source="{Binding Icon, TargetNullValue={x:Null}}" />
                        <TextBlock FontSize="12" Padding="6" Text="{Binding Name, Mode=TwoWay}" />
                    </DockPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" >
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}" >
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <DockPanel>
                                        <Image DockPanel.Dock="Left" Stretch="Uniform" Margin="1" MaxHeight="28" VerticalAlignment="Center" Source="{Binding Icon, TargetNullValue={x:Null}}" />
                                        <TextBlock FontSize="12" Padding="6" Text="{Binding Name, Mode=TwoWay}" />
                                    </DockPanel>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Highlight}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsSelected" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Gray.MouseOver}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsSelected" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource MahApps.Brushes.Accent}"/>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding IsDefault}" Value="True" >
                            <Setter Property="BorderThickness" Value="3"/>
                            <Setter Property="BorderBrush" Value="Red" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsVisible}" Value="False" >
                            <Setter Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OctideListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource IdeBaseItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <DockPanel>
                            <Image DockPanel.Dock="Left" Stretch="Uniform" Margin="1" MaxHeight="28" VerticalAlignment="Center" Source="{Binding Icon, TargetNullValue={x:Null}}" />
                            <controls:EditableTextBlock Padding="6" Text="{Binding Name, Mode=TwoWay}" CanEdit="{Binding CanEdit}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OctideHorizontalListBoxItemStyle" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource IdeBaseItemStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}" >
                    <Border Margin="3" Padding="5" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" >
                        <DockPanel >
                            <controls:EditableTextBlock DockPanel.Dock="Bottom" Text="{Binding Name, Mode=TwoWay}" />
                            <Image Source="{Binding Icon}" Stretch="Uniform" Margin="0 0 0 4"/>
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- base style for vertical listboxes -->
    <Style x:Key="OctideListBoxBaseStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}" >
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="gong:DragDrop.IsDragSource" Value="True" />
        <Setter Property="gong:DragDrop.IsDropTarget" Value="True" />
        <Setter Property="gong:DragDrop.DragDropCopyKeyState" Value="ControlKey" />
        <Setter Property="gong:DragDrop.UseDefaultEffectDataTemplate" Value="True" />
        <Setter Property="gong:DragDrop.UseDefaultDragAdorner" Value="True" />
        <Setter Property="local:ScrollViewerHelper.ScrollSelectedIntoView" Value="True" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource IdeBaseItemStyle}" />
    </Style>

    <!-- base style for horizontal listboxes -->
    <Style x:Key="OctideHorizontalListBoxBaseStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource OctideListBoxBaseStyle}">
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="local:ScrollViewerHelper.ShiftWheelScrollsHorizontally" Value="True" />
    </Style>

    <!-- style for vertical listboxes -->
    <Style x:Key="OctideListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource OctideListBoxBaseStyle}" >
        <Setter Property="BorderBrush" Value="{StaticResource MahApps.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource OctideListBoxItemStyle}" />
    </Style>
    <!-- style for Horizontal listboxes -->
    <Style x:Key="OctideHorizontalListBoxStyle" TargetType="{x:Type ListBox}" BasedOn="{StaticResource OctideHorizontalListBoxBaseStyle}" >
        <Setter Property="BorderBrush" Value="{StaticResource MahApps.Brushes.Control.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource OctideHorizontalListBoxItemStyle}" />
    </Style>

    <Style TargetType="Border" x:Key="PanelControl">
        <Setter Property="Background" Value="{StaticResource ControlFillBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource ControlBorderBrush}" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Margin" Value="3"/>
        <Setter Property="Padding" Value="3" />
    </Style>


    <Style x:Key="NewItemButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Margin" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <RotateTransform Angle="90" />
            </Setter.Value>
        </Setter>
    </Style>



    <DropShadowBitmapEffect x:Key="PopupDropShadow" ShadowDepth="1.5" Softness="0.15" />
    <SolidColorBrush x:Key="TextBrush" Color="#FFFFFFFF" />
    <SolidColorBrush x:Key="MenuItemHover" Color="DimGray"/>
    <SolidColorBrush x:Key="LightBrush" Color="#FF333333" />

    <Style x:Key="OctgnActionMenuTemplate">
        <Style.Resources>
            <Style TargetType="{x:Type Menu}">
                <Setter Property="Background" Value="#333333" />
                <Setter Property="BorderBrush" Value="#FF333333" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Menu}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <ScrollViewer x:Name="scrollviewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}" CanContentScroll="True" >
                                    <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                </ScrollViewer>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type MenuItem}">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type MenuItem}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="HighlightedOn">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="1"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="HightlightedOff">
                                    <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="HoverBorder" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <SplineDoubleKeyFrame KeyTime="00:00:00.3000000" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,0,0" Margin="0,0,0,0" MinHeight="20">
                                <Grid Margin="0,0,0,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup" />
                                        <ColumnDefinition Width="14" />
                                    </Grid.ColumnDefinitions>
                                    <Border Grid.Column="0" Grid.ColumnSpan="4" Background="{DynamicResource MenuItemHover}" Opacity="0" x:Name="HoverBorder" CornerRadius="1,1,1,1"/>
                                    <ContentPresenter Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon" />
                                    <Grid Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                        <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight" />
                                    </Grid>
                                    <Border Grid.Column="1" VerticalAlignment="Center">
                                        <ContentPresenter Grid.Column="1" x:Name="HeaderHost" RecognizesAccessKey="True" ContentSource="Header" Margin="2,1,2,1"/>
                                    </Border>
                                    <Border Grid.Column="2" VerticalAlignment="Center">
                                        <TextBlock x:Name="InputGestureText" Text="{TemplateBinding InputGestureText}" Foreground="{StaticResource TextBrush}" Opacity=".5"
                                    Margin="5,2,0,2" DockPanel.Dock="Right" FontSize="9"/>
                                    </Border>

                                    <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                        <Path x:Name="ArrowPanelPath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" />
                                    </Grid>
                                    <Popup IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Right" x:Name="SubMenuPopup" Focusable="false" AllowsTransparency="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Grid x:Name="SubMenu">
                                            <Border x:Name="SubMenuBorder" Background="{DynamicResource LightBrush}" BorderThickness="1" Opacity="0.8">
                                                <Border.BorderBrush>
                                                    <SolidColorBrush Color="DimGray" />
                                                </Border.BorderBrush>
                                            </Border>
                                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                        </Grid>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Role" Value="TopLevelHeader">
                                    <Setter Property="Margin" Value="0,1,0,1" />
                                    <Setter Property="Padding" Value="6,3,6,3" />
                                    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                    <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>
                                <Trigger Property="Role" Value="TopLevelItem">
                                    <Setter Property="Margin" Value="0,1,0,1" />
                                    <Setter Property="Padding" Value="6,3,6,3" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuHeader">
                                    <Setter Property="DockPanel.Dock" Value="Top" />
                                    <Setter Property="Padding" Value="0,6,0,6" />
                                    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
                                </Trigger>
                                <Trigger Property="Role" Value="SubmenuItem">
                                    <Setter Property="DockPanel.Dock" Value="Top" />
                                    <Setter Property="Padding" Value="0,6,0,6" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel" />
                                </Trigger>
                                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                    <Setter Property="PopupAnimation" Value="None" TargetName="SubMenuPopup" />
                                </Trigger>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                </Trigger>
                                <Trigger Property="IsChecked" Value="true">
                                    <Setter Property="Visibility" Value="Visible" TargetName="GlyphPanel" />
                                    <Setter Property="Visibility" Value="Collapsed" TargetName="Icon" />
                                </Trigger>
                                <Trigger Property="AllowsTransparency" SourceName="SubMenuPopup" Value="true">
                                    <Setter Property="Margin" Value="0,0,3,3" TargetName="SubMenu" />
                                    <Setter Property="SnapsToDevicePixels" Value="true" TargetName="SubMenu" />
                                    <Setter Property="BitmapEffect" Value="{DynamicResource PopupDropShadow}" TargetName="SubMenuBorder" />
                                </Trigger>
                                <Trigger Property="IsHighlighted" Value="true">
                                    <Trigger.ExitActions>
                                        <BeginStoryboard Storyboard="{StaticResource HightlightedOff}" x:Name="HightlightedOff_BeginStoryboard"/>
                                    </Trigger.ExitActions>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource HighlightedOn}"/>
                                    </Trigger.EnterActions>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Separator}">
                <Setter Property="Height" Value="1" />
                <Setter Property="Margin" Value="0,2,0,2" />
                <Setter Property="Focusable" Value="false" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Separator}">
                            <Border BorderBrush="#888" BorderThickness="1" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

</ResourceDictionary>